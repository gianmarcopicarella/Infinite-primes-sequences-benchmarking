
{-# OPTIONS_GHC -Wall #-} 

{-|

  Module      : AutoBench.Internal.Chart
  Description : ???
  Copyright   : (c) 2018 Martin Handley
  License     : BSD-style
  Maintainer  : martin.handley@nottingham.ac.uk
  Stability   : Experimental
  Portability : GHC

  ???

-}

{-
   ----------------------------------------------------------------------------
   <TO-DO>:
   ----------------------------------------------------------------------------
   - Combine setters.
-}
module AutoBench.Internal.Chart (plotAndSaveAnalGraph) where 

import Control.Lens                           ((.=), (%=), _Just)
import Control.Monad                          (void)
import Data.Colour                            (AlphaColour, opaque)
import Data.Default.Class                     (def)
import Graphics.Rendering.Chart.Backend.Cairo ( FileFormat(..), FileOptions(..)
                                              , renderableToFile )
import Graphics.Rendering.Chart.Grid          ( Grid, gridToRenderable, overlay
                                              , tspan )
import Graphics.Rendering.Chart.State         (EC, execEC, plot, liftEC)
import System.FilePath.Posix                  (makeValid)
            
import Data.Colour.Names
import Graphics.Rendering.Chart                    

import AutoBench.Internal.Types (Coord)

-- | Plot a graph of runtimes measurements from test programs along with 
-- models of best fit for each respective srt of data points.
-- 
-- * Runtime measurements are plotted as points;
-- * Models are plotted as trend lines;
-- * X-axis is input size;
-- * Y-axis is runtime.
--
-- Note: this function includes some hacks to modify the spacing of the x-axis 
-- title.
plotAndSaveAnalGraph 
  :: FilePath         -- ^ Save to.
  -> [(Id, [Coord])]  -- ^ Points.
  -> [(Id, [Coord])]  -- ^ Curves of best fit.
  -> IO ()
plotAndSaveAnalGraph fp ps ls = 
  void 
    . renderableToFile fileOpts (makeValid fp) 
    . fillBackground def 
    . gridToRenderable 
    $ tspan xAxisLabel (8, 7) `overlay` tspan logo (8, 8) `overlay` graphGrid

  where
    -- The spacing for the x-axis title is annoying, and doesn't seem to be 
    -- modifiable. So we've hacked it.
    xAxisLabel = setPickFn nullPickFn $
      label (def {_font_size = 40 }) HTA_Centre VTA_BaseLine "Input Size"
    
    -- Add an AutoBench logo.
    logo = setPickFn nullPickFn 
            $ label (def { _font_size = 30.0
                         , _font_slant = FontSlantOblique
                         , _font_color = opaque grey 
                         }
                    ) HTA_Right VTA_Bottom "Generated by AutoBench."

    -- The actual graph to plot with its titles, labels etc.
    graphGrid :: Grid (Renderable (LayoutPick Double Double Double))
    graphGrid  = layoutToGrid . execEC $ do 

      -- Basics:
      layout_margin     .= 40.0
      layout_foreground .= opaque black

      -- Font size:
      layout_axes_title_styles . font_size %= (* 1.2)
      layout_all_font_styles   . font_size %= (* 3.5)

      -- Title:
      layout_title .= foldr1 (\s1 acc -> s1 ++ " vs. " ++ acc) (fmap fst ps)

      -- Axes:

      -- Note: hacked the x-axis title because the spacing was an issue.
      -- We set the title to empty string for the spacing, then placed a label 
      -- underneath it.
      layout_x_axis . laxis_title .= " "
      -- Edit the font size to change distance between x-axis labels and title.
      layout_x_axis . laxis_title_style . font_size .= 15.0 
      -- Rest of settings are standard
      layout_x_axis . laxis_style . axis_line_style . line_width .= 3.0
      layout_x_axis . laxis_style . axis_grid_style . line_width .= 3.0
      layout_x_axis . laxis_style . axis_label_gap               .= 20.0
      layout_x_axis . laxis_generate                             .= scaledAxis axis (xMin, xMax)

      -- y-axis doesn't need to be hacked.
      layout_y_axis . laxis_title                                .=  "Time (" ++ yUnits ++ ")"
      layout_y_axis . laxis_title_style . font_size              .= 40.0
      layout_y_axis . laxis_style . axis_line_style . line_width .= 3.0
      layout_y_axis . laxis_style . axis_grid_style . line_width .= 3.0
      layout_y_axis . laxis_style . axis_label_gap               .= 20.0
      layout_y_axis . laxis_generate                             .= scaledAxis axis (yMin, yMax)
      
      -- Legend:
      layout_legend . _Just . legend_margin    .= 30.0
      layout_legend . _Just . legend_plot_size .= 40.0
      layout_legend . _Just . legend_position  .= LegendBelow

      -- Plots:
      mapM_ (\((s, c), cl) -> plot (plotPoints s c cl)) (zip ps' colours)
      mapM_ (\((s, c), cl) -> plot (plotLines  s c cl)) (zip ls' colours)

    -- Helpers: ---------------------------------------------------------------
    
    (yScale, yUnits) = calcYAxisScaleAndUnits $ concat [ fmap snd cs | (_, cs) <- ps ]

    -- Min/max for axes scaling.
    xMin = minimum $ concatMap (fmap fst . snd) ps'
    xMax = maximum $ concatMap (fmap fst . snd) ps'
    yMin = minimum $ concatMap (fmap snd . snd) ps'
    yMax = maximum $ concatMap (fmap snd . snd) ps'
    
    -- Runtime measurements are in seconds, so we scale them to ms, μs, ns, etc. 
    -- so the scaling on the y-axis isn't, e.g., 0.0000001 seconds.
    ps' = [ (s, scaleYCoords yScale cs) | (s, cs) <- ps ]
    ls' = [ (s, scaleYCoords yScale cs) | (s, cs) <- ls ]

    scaleYCoords = fmap . fmap . (*)

    -- Runtime measurement are plotted as points.
    plotPoints 
      :: String 
      -> [(Double, Double)] 
      -> AlphaColour Double 
      -> EC l (PlotPoints Double Double)
    plotPoints title coords colour = liftEC $ do
      plot_points_values                     .= coords
      plot_points_title                      .= title
      plot_points_style . point_color        .= colour
      plot_points_style . point_border_color .= colour
      plot_points_style . point_border_width .= 2.0
      plot_points_style . point_shape        .= PointShapeCross
      plot_points_style . point_radius       .= 10.0

    -- Models are plotted as trend lines.
    plotLines 
      :: String 
      -> [(Double, Double)] 
      -> AlphaColour Double 
      -> EC l (PlotLines Double Double)
    plotLines title coords colour = liftEC $ do
      plot_lines_title  .= title
      plot_lines_values .= [coords]
      plot_lines_style  .= solidLine 3.0 colour

    -- We want ~10 labels on each axis and ~100 ticks.
    -- We use scaledAxis anyway, so can generate more labels if needed.
    axis = def {_la_nLabels = 10, _la_nTicks = 100 }

    -- Calculate the y-axis scale and units for plotting runtime measurements.
    -- Note: runtimes should be sanitised first to ensure that they are all 
    -- non-negative, see 'sanitiseRuntimes'.
    calcYAxisScaleAndUnits ds = scale_ dsMin
      where 
        dsMin = maximum ds
        scale_ d
          | d < 0      = error "negative runtime: calcYAxisScaleAndUnits"
          | d >= 1     = (1,     "s")
          | d >= 1e-3  = (1e3,  "ms")
          | d >= 1e-6  = (1e6,  "μs")
          | d >= 1e-9  = (1e9,  "ns")
          | d >= 1e-12 = (1e12, "ps")
          | d >= 1e-15 = (1e15, "fs")
          | d >= 1e-18 = (1e18, "as")
          | otherwise  = (1,     "s")

    -- | Opaque colours for points/lines.
    colours :: [AlphaColour Double]
    colours  = fmap opaque
      [
        blue
      , red
      , forestgreen
      , darkmagenta
      , deeppink
      , darkorange
      , black
      , coral
      ]

    -- Compatible resolution with my MacBook at least?
    -- Note: this should probably be a user setting?
    fileOpts :: FileOptions
    fileOpts  = FileOptions (2560, 1600) PNG